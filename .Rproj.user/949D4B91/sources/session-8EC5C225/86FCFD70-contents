#Desired climb time
ClimbTime <- hm("06:00")
ClimbDuration <- hm("10:00")
#=====
library(readr)
library(here)
Island_Climbing<-read_rds(paste0(here(),"/data/Island_Climbing.rds"))


source(here("R","functions.R"))
source(here("R","old_data_editing_code.R"))
source(here("R","web_scraping.R"))
#source(here("R","app_build.R"))#<--- Used for ShinyApp later on when this all works





# Code to enter lead or second climb and date
Add_Lead <- function(ClimbName, ClimbDate){
  Island_Climbing$Lead[Island_Climbing$`Climb Name`==ClimbName] <- "Y"
  
  Island_Climbing$Date_Lead[Island_Climbing$`Climb Name`==ClimbName] <- ClimbDate
}

Add_Second <- function(ClimbName, ClimbDate){
  Island_Climbing$`2nd`[Island_Climbing$`Climb Name`==ClimbName] <- "Y"
  
  Island_Climbing$Date_Seconded[Island_Climbing$`Climb Name`==ClimbName] <- ClimbDate
}





#====
Map_Gen <- function(area_name = NULL,
                    climb_name = NULL,
                    climb_grade = NULL,
                    hardest_move = NULL,
                    tide_season = NULL,
                    tide_height = NULL,
                    hours_innacessible = NULL,
                    is_lead = NULL,
                    is_seconded = NULL) {
  FilterList <- Climbing_Filter(Name_Of_Area = area_name,
                                Climb_Name = climb_name,
                                Climb_Grade = climb_grade,
                                Hardest_Move = hardest_move,
                                Tide_Season = tide_season,
                                Tide_Height = tide_height,
                                Hours_Innacessible = hours_innacessible,
                                Lead = is_lead,
                                Seconded= is_seconded)
  
 FilteredList_Group_Counted <- left_join(Island_Climbing %>%
              filter(`Climb Name` %in% FilterList$`Climb Name` & `Name Of Area` %in% FilterList$`Name Of Area`),
            Island_Climbing %>%
              filter(`Climb Name` %in% FilterList$`Climb Name` & `Name Of Area` %in% FilterList$`Name Of Area`) %>%
              group_by(`Name Of Area`) %>%
              summarise(number = n())%>% ungroup())  
  
 MyColour <- viridis_pal(option = "C")(nrow(unique(FilteredList_Group_Counted%>%select(number))))
 
 FilteredList_Group_Counted <- merge(FilteredList_Group_Counted%>%
                                       select(number) %>%
                                       unique() %>%
                                       arrange(number) %>%
                                       mutate(id=row_number()),
                                     FilteredList_Group_Counted,
                                     by="number")
 pal <- colorFactor(palette = MyColour, domain=FilteredList_Group_Counted$number)
 
 leaflet()%>%
   addTiles()%>%
   addCircles(data=
                FilteredList_Group_Counted,
              lat = ~Latitide,
              lng = ~Longitude,
              radius =
                5*1.02^FilteredList_Group_Counted$number,
              fillOpacity = 1,
              popup = FilteredList_Group_Counted$`Name Of Area`,
              color = "black",
              #fillColor = "white",
              fillColor = MyColour[FilteredList_Group_Counted$id],
              weight = 0.0001+1.02^FilteredList_Group_Counted$number,
              opacity = 0.9,
              stroke=TRUE,
   )%>%
   addLegend("bottomright",
             pal = pal,
             values = unique(FilteredList_Group_Counted$number),
             title = "# Of Climbs",
             labFormat = labelFormat(prefix = ""),
             opacity = 1)
}
















Island_Climbing %>% select(`Tide Season`, `Tide Height`, `Hours to be inaccesible`) %>% unique()




Tide_Restriction <- function(ClimbTime, ClimbDuration) {
  if (Tide_Season == "Neap") {
    Island_Climbing %>% filter(`Tide Season` == "Neap" & 1)
    
  }
  if (Tide_Season == "Spring") {
    Island_Climbing %>% filter(`Tide Season` == "Spring")
  }
  
  if (Tide_Season == "All") {
    
  }
}


Tide_Function <- function(height, time, duration){
  
  ifelse(height == "All", NULL , ifelse(height == "High" , 2 , 3 ) )
  
}





Island_Climbing %>% mutate(
  Test = ifelse(`Tide Season`== "All",
               1,
                ifelse(
                  `Tide Season`== "Spring",
                  ifelse(
                    Tide_Season == "Spring",
                    "a",
                    "b"
                    ),
                  ifelse(Tide_Season == "Neap", "c", "d")))
) %>% select(Test) %>% unique() %>% View(
)

Tide_Season == "Spring"
Tide_Season == "Neap"







# if neap and low then for spring choose 1h after mid point of tide times (tide moving down)
# if neap and high then for spring choose 1h after mid-point of tide times (tide moving upwards)

#If spring high , allow all neap tides
#If spring low, disallow all neap tides





####
# API STUFF
####

base<- "https://tics.seeker.gg/api/event"
raw_results <-GET(base)


converted_content <- content(raw_results,as="text")
 
converted_json <- fromJSON(converted_content)

ClimbTime + ClimbDuration

as.period(c(ClimbTime, Climbtime + ClimbDuration))



server <- function(input, output, session) {
  # Loading modal to keep user out of trouble while map draws...
    #showModal(modalDialog(title="MAP LOADING - PLEASE WAIT...","Please wait for map to draw before proceeding.",size="l",footer=NULL))

  # Remove modal when app is ready
     #observe({
     #  req(map)
     #  removeModal()
     #})
  
  # Load data
  read_rds(paste0(here(),"/data/Island_Climbing.rds"))
  
  
  }
shinyApp(ui, server)

