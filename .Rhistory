load("~/GitHub/Island_Climbing/data/island_climbing.rda")
View(island_climbing)
#=====
library(readr)
library(here)
Island_Climbing<-read_rds(paste0(here(),"/data/Island_Climbing.rds"))
source(here("R","functions.R"))
#Desired climb time
ClimbTime <- hm("32:00")
ClimbDuration <- hm("2:00")
source(here("R","web_scraping.R"))
source(here("R","tide_function.R"))
#Below is an example run of the map function which filters for climbs in the E2 difficulty range and ones that are not underwater!
Map_Gen(climb_grade = c("E2", "E3"), limit_by_tide = 1) #as long as limit_by_tide != NULL it filters underwater climbs out
day_n_tide <- function(n){
output <- Website |>
pluck(n) |>
Clean_Tide_Tables() |>
mutate(times = times + hours(24*(n-1)))
}
Tide_Table <- rbind(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)))
Tide_Table
Tide_Table <- rbind(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)))[1]
Tide_Table <- rbind(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)))[1,2]
Tide_Table <- rbind(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)))[1,1]
Tide_Table <- rbind(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)))
Tide_Table
Tide_Table[1]
Tide_Table[2]
Tide_Table[3]
Tide_Table[4]
Tide_Table[5]
Tide_Table[6]
Tide_Table[7]
Tide_Table[8]
Tide_Table <- rbind(list(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x))))
Tide_Table
Tide_Table[1]
Tide_Table <- rbind(c(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x))))
Tide_Table
Tide_Table[1]
Tide_Table <- rbind(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x) %>% pluck(1)) )
Tide_Table
Tide_Table <- rbind(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)) )
Tide_Table
Tide_Table <- rbindlist(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)) )
library(data.table())
library(data.table)
Tide_Table <- rbindlist(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)) )
Tide_Table
Tide_Table %>% View()
Tide_Table <- rbindlist(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)), fill = FALSE )
Tide_Table
Tide_Table <- rbindlist(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)), use.names = TRUE)
Tide_Table
Tide_Table <- rbindlist(map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)), use.names = TRUE) %>% View()
map(c(1,2,3,4,5,6,7), ~day_n_tide(.x))
map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)) %>% pluck(1)
map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)) %>% pluck(2)
map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)) %>% pluck(3)
map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)) %>% rbind()
map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)) %>% rbindlist()
map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)) %>% do.call("rbind", list)
do.call("rbind", map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)))
do.call("rbind", map(c(1,2,3,4,5,6,7), ~day_n_tide(.x))) %>% View()
Tide_Table <- do.call("rbind", map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)) )
Tide_Table
Tide_Table %>% class
#=====
library(readr)
library(here)
Island_Climbing<-read_rds(paste0(here(),"/data/Island_Climbing.rds"))
source(here("R","functions.R"))
#Desired climb time
ClimbTime <- hm("32:00")
ClimbDuration <- hm("2:00")
source(here("R","web_scraping.R"))
source(here("R","tide_function.R"))
#Below is an example run of the map function which filters for climbs in the E2 difficulty range and ones that are not underwater!
Map_Gen(climb_grade = c("E2", "E3"), limit_by_tide = 1) #as long as limit_by_tide != NULL it filters underwater climbs out
# Below is code to get a weeks worth of tides
day_n_tide <- function(n){
output <- Website |>
pluck(n) |>
Clean_Tide_Tables() |>
mutate(times = times + hours(24*(n-1)))
}
Tide_Table <- do.call("rbind", map(c(1,2,3,4,5,6,7), ~day_n_tide(.x)) )
Tide_Table
#=====
library(readr)
library(here)
Island_Climbing<-read_rds(paste0(here(),"/data/Island_Climbing.rds"))
source(here("R","functions.R"))
#Desired climb time
ClimbTime <- hm("32:00")
ClimbDuration <- hm("2:00")
source(here("R","web_scraping.R"))
source(here("R","tide_function.R"))
#Below is an example run of the map function which filters for climbs in the E2 difficulty range and ones that are not underwater!
Map_Gen(climb_grade = c("E2", "E3"), limit_by_tide = 1) #as long as limit_by_tide != NULL it filters underwater climbs out
#=====
library(readr)
library(here)
Island_Climbing<-read_rds(paste0(here(),"/data/Island_Climbing.rds"))
source(here("R","functions.R"))
#Desired climb time
ClimbTime <- hm("32:00")
ClimbDuration <- hm("2:00")
source(here("R","web_scraping.R"))
source(here("R","tide_function.R"))
#Below is an example run of the map function which filters for climbs in the E2 difficulty range and ones that are not underwater!
Map_Gen(climb_grade = c("E2", "E3"), limit_by_tide = 1) #as long as limit_by_tide != NULL it filters underwater climbs out
#=====
library(readr)
#=====
library(readr)
library(here)
Island_Climbing<-read_rds(paste0(here(),"/data/Island_Climbing.rds"))
source(here("R","functions.R"))
#Desired climb time
ClimbTime <- hm("32:00")
ClimbDuration <- hm("2:00")
source(here("R","web_scraping.R"))
source(here("R","tide_function.R"))
Tide_Table
source(here("R","tide_function.R"))
#Below is an example run of the map function which filters for climbs in the E2 difficulty range and ones that are not underwater!
Map_Gen(climb_grade = c("E2", "E3"), limit_by_tide = 1) #as long as limit_by_tide != NULL it filters underwater climbs out
#Below is an example run of the map function which filters for climbs in the E2 difficulty range and ones that are not underwater!
Map_Gen(climb_grade = c("E2"), limit_by_tide = 1) #as long as limit_by_tide != NULL it filters underwater climbs out
points
data_to_points(Tide_Table)
data_to_points(Tide_Table) %>% filter(t > period_to_seconds(ClimbTime))
data_to_points(Tide_Table) %>% filter(t > period_to_seconds(ClimbTime) && t< period_to_seconds(ClimbTime + ClimbDuration))
data_to_points(Tide_Table) %>% filter(t > period_to_seconds(ClimbTime) && t< period_to_seconds(ClimbTime) + period_to_seconds(ClimbDuration))
data_to_points(Tide_Table) %>% filter(t > period_to_seconds(ClimbTime) & t< period_to_seconds(ClimbTime) + period_to_seconds(ClimbDuration))
#=====
library(readr)
library(here)
Island_Climbing<-read_rds(paste0(here(),"/data/Island_Climbing.rds"))
source(here("R","functions.R"))
#Desired climb time
ClimbTime <- hm("32:00")
ClimbDuration <- hm("2:00")
source(here("R","web_scraping.R"))
source(here("R","tide_function.R"))
#Below is an example run of the map function which filters for climbs in the E2 difficulty range and ones that are not underwater!
Map_Gen(climb_grade = c("E2"), limit_by_tide = 1) #as long as limit_by_tide != NULL it filters underwater climbs out
#=====
library(readr)
library(here)
Island_Climbing<-read_rds(paste0(here(),"/data/Island_Climbing.rds"))
source(here("R","functions.R"))
#Desired climb time
ClimbTime <- hm("32:00")
ClimbDuration <- hm("2:00")
source(here("R","web_scraping.R"))
source(here("R","tide_function.R"))
#Below is an example run of the map function which filters for climbs in the E2 difficulty range and ones that are not underwater!
Map_Gen(climb_grade = c("E2"), limit_by_tide = 1) #as long as limit_by_tide != NULL it filters underwater climbs out
install.packages(gitignore)
install.packages("gitignore")
library(gitignore)
gitignore::gi_write_gitignore()
