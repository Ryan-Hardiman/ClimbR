opacity = 1,
orientation ='horizontal')
}
Map_Gen()
#====
Map_Gen <- function(area_name = NULL,
climb_name = NULL,
climb_grade = NULL,
hardest_move = NULL,
tide_season = NULL,
tide_height = NULL,
hours_innacessible = NULL,
is_lead = NULL,
is_seconded = NULL,
limit_by_tide = NULL) {
FilterList <- Climbing_Filter(Name_Of_Area = area_name,
Climb_Name = climb_name,
Climb_Grade = climb_grade,
Hardest_Move = hardest_move,
Tide_Season = tide_season,
Tide_Height = tide_height,
Hours_Innacessible = hours_innacessible,
Lead = is_lead,
Seconded= is_seconded,
limit_by_tide = limit_by_tide)
FilteredList_Group_Counted <- Island_Climbing |>
filter(row_number() %in% FilterList$id) |>
group_by(`Name Of Area`) |>
mutate(number = n()) |>
ungroup()
#Creating a colour wheel with the number of distinct values for no. of climbs
MyColour <- viridis_pal(option = "C")(
nrow(unique(FilteredList_Group_Counted|> select(number)))
)
FilteredList_Group_Counted <- merge(FilteredList_Group_Counted|>
select(number) |>
unique() |>
arrange(number) |>
mutate(id=row_number()),
FilteredList_Group_Counted,
by="number")
pal <- colorFactor(palette = MyColour, domain=FilteredList_Group_Counted$number)
leaflet()|>
addTiles()|>
addCircles(data=
FilteredList_Group_Counted,
lat = ~Latitide,
lng = ~Longitude,
radius =
5*1.02^FilteredList_Group_Counted$number,
fillOpacity = 1,
popup = FilteredList_Group_Counted$`Name Of Area`,
color = "black",
#fillColor = "white",
fillColor = MyColour[FilteredList_Group_Counted$id],
weight = 0.0001+1.02^FilteredList_Group_Counted$number,
opacity = 0.9,
stroke=TRUE,
)|>
addLegendSize("bottomright",
pal = pal,
values = unique(FilteredList_Group_Counted$number),
title = "# Of Climbs",
labFormat = labelFormat(prefix = ""),
opacity = 1,
orientation ='horizontal')
}
Map_Gen()
#====
Map_Gen <- function(area_name = NULL,
climb_name = NULL,
climb_grade = NULL,
hardest_move = NULL,
tide_season = NULL,
tide_height = NULL,
hours_innacessible = NULL,
is_lead = NULL,
is_seconded = NULL,
limit_by_tide = NULL) {
FilterList <- Climbing_Filter(Name_Of_Area = area_name,
Climb_Name = climb_name,
Climb_Grade = climb_grade,
Hardest_Move = hardest_move,
Tide_Season = tide_season,
Tide_Height = tide_height,
Hours_Innacessible = hours_innacessible,
Lead = is_lead,
Seconded= is_seconded,
limit_by_tide = limit_by_tide)
FilteredList_Group_Counted <- Island_Climbing |>
filter(row_number() %in% FilterList$id) |>
group_by(`Name Of Area`) |>
mutate(number = n()) |>
ungroup()
#Creating a colour wheel with the number of distinct values for no. of climbs
MyColour <- viridis_pal(option = "C")(
nrow(unique(FilteredList_Group_Counted|> select(number)))
)
FilteredList_Group_Counted <- merge(FilteredList_Group_Counted|>
select(number) |>
unique() |>
arrange(number) |>
mutate(id=row_number()),
FilteredList_Group_Counted,
by="number")
pal <- colorFactor(palette = MyColour, domain=FilteredList_Group_Counted$number)
leaflet()|>
addTiles()|>
addCircles(data=
FilteredList_Group_Counted,
lat = ~Latitide,
lng = ~Longitude,
radius =
5*1.02^FilteredList_Group_Counted$number,
fillOpacity = 1,
popup = FilteredList_Group_Counted$`Name Of Area`,
color = "black",
#fillColor = "white",
fillColor = MyColour[FilteredList_Group_Counted$id],
weight = 0.0001+1.02^FilteredList_Group_Counted$number,
opacity = 0.9,
stroke=TRUE,
)|>
addLegend("bottomright",
pal = pal,
values = unique(FilteredList_Group_Counted$number),
title = "# Of Climbs",
labFormat = labelFormat(prefix = ""),
opacity = 1
)
}
Map_Gen()
server <- function(input, output, session) {
# Loading modal to keep user out of trouble while map draws...
#showModal(modalDialog(title="MAP LOADING - PLEASE WAIT...","Please wait for map to draw before proceeding.",size="l",footer=NULL))
# Remove modal when app is ready
#observe({
#  req(map)
#  removeModal()
#})
# Load data
read_rds(paste0(here(),"/data/Island_Climbing.rds"))
map = leaflet::createLeafletMap(session, 'map')
session$onFlushed(once = T, function(){
output$map <- leaflet::renderLeaflet(
Map_Gen()
)
})
}
shinyApp(ui, server)
server <- function(input, output, session) {
# Loading modal to keep user out of trouble while map draws...
#showModal(modalDialog(title="MAP LOADING - PLEASE WAIT...","Please wait for map to draw before proceeding.",size="l",footer=NULL))
# Remove modal when app is ready
#observe({
#  req(map)
#  removeModal()
#})
# Load data
read_rds(paste0(here(),"/data/Island_Climbing.rds"))
map = leaflet::createLeafletMap(session, 'map')
session$onFlushed(once = T, function(){
output$map <- leaflet::renderLeaflet(
Map_Gen()
)
})
}
shinyApp(ui, server)
ui <-fluidPage(
# Input widgets
fluidRow(
column(6,
conditionalPanel(condition="input.plot_tabs!='Front Page'",
tabsetPanel(id="ui_tab",
tabPanel("Map",
column(12,h5("Click a Climb"),withSpinner(leaflet::leafletOutput("map", height="600px"),size=2, color="#7c2599"))
),
tabPanel("Table",
column(12, h5("Choose a Climb"), div(dataTableOutput("table_input"), style = "font-size:70%"))
)
)
),
conditionalPanel(condition="input.plot_tabs=='Front Page'",
column(12)
)
),
column(6,tabsetPanel(id="plot_tabs",
tabPanel("Time series",
fluidRow(column(8,
uiOutput("date_slider"),
radioButtons("ts_plot_type","Plot type:", choices=c("Heatmap", "Habitable width", "Water column exceedances"), inline=T),
conditionalPanel(condition="input.ts_plot_type=='Heatmap'",
selectInput("heatmap_param",label="Heatmap parameter:", choices= heatmap_param_choices)
),
checkboxInput("show_dates", label="Show all profile dates", value=TRUE),
conditionalPanel(condition="input.ts_plot_type=='Heatmap'",
plotOutput("heatmap")
),
conditionalPanel(condition="input.ts_plot_type=='Habitable width'",
plotOutput("hab_width")
),
conditionalPanel(condition="input.ts_plot_type=='Water column exceedances'",
plotOutput("pct_exc")
)
))
),
tabPanel("Individual profiles",
fluidRow(
column(4, uiOutput("date_select"))
),
fluidRow(
column(4,h4("Profile plot"),plotOutput("ind_prof_plot", height="500px")),
column(8,h4("Profile data"),div(dataTableOutput("profile_table"), style = "font-size:80%"))
)
),
tabPanel("Front Page",
fluidRow(
column(12,
includeMarkdown(here("R","Front_Page.md"))
)
)
)
))
)
)
source("~/GitHub/Island_Climbing/R/app_build.R")
server <- function(input, output, session) {
# Loading modal to keep user out of trouble while map draws...
#showModal(modalDialog(title="MAP LOADING - PLEASE WAIT...","Please wait for map to draw before proceeding.",size="l",footer=NULL))
# Remove modal when app is ready
#observe({
#  req(map)
#  removeModal()
#})
# Load data
read_rds(paste0(here(),"/data/Island_Climbing.rds"))
map = leaflet::createLeafletMap(session, 'map')
session$onFlushed(once = T, function(){
output$map <- leaflet::renderLeaflet(
Map_Gen()
)
})
}
shinyApp(ui, server)
ui <-fluidPage(
# Input widgets
fluidRow(
column(6,
conditionalPanel(condition="input.plot_tabs!='Front Page'",
tabsetPanel(id="ui_tab",
tabPanel("Map",
column(12,h5("Click a Climb"),withSpinner(leaflet::leafletOutput("map", height="600px"),size=2, color="#7c2599"))
),
tabPanel("Table",
column(12, h5("Choose a Climb"), div(dataTableOutput("table_input"), style = "font-size:70%"))
)
)
),
conditionalPanel(condition="input.plot_tabs=='Front Page'",
column(12)
)
),
column(6,tabsetPanel(id="plot_tabs",
tabPanel("Filters",
fluidRow(column(8,
uiOutput("date_slider"),
radioButtons("ts_plot_type","Plot type:", choices=c("Heatmap", "Habitable width", "Water column exceedances"), inline=T),
conditionalPanel(condition="input.ts_plot_type=='Heatmap'",
selectInput("heatmap_param",label="Heatmap parameter:", choices= heatmap_param_choices)
),
checkboxInput("show_dates", label="Show all profile dates", value=TRUE),
conditionalPanel(condition="input.ts_plot_type=='Heatmap'",
plotOutput("heatmap")
),
conditionalPanel(condition="input.ts_plot_type=='Habitable width'",
plotOutput("hab_width")
),
conditionalPanel(condition="input.ts_plot_type=='Water column exceedances'",
plotOutput("pct_exc")
)
))
),
tabPanel("Individual profiles",
fluidRow(
column(4, uiOutput("date_select"))
),
fluidRow(
column(4,h4("Profile plot"),plotOutput("ind_prof_plot", height="500px")),
column(8,h4("Profile data"),div(dataTableOutput("profile_table"), style = "font-size:80%"))
)
),
tabPanel("Front Page",
fluidRow(
column(12,
includeMarkdown(here("R","Front_Page.md"))
)
)
)
))
)
)
source("~/GitHub/Island_Climbing/R/app_build.R")
server <- function(input, output, session) {
# Loading modal to keep user out of trouble while map draws...
#showModal(modalDialog(title="MAP LOADING - PLEASE WAIT...","Please wait for map to draw before proceeding.",size="l",footer=NULL))
# Remove modal when app is ready
#observe({
#  req(map)
#  removeModal()
#})
# Load data
read_rds(paste0(here(),"/data/Island_Climbing.rds"))
map = leaflet::createLeafletMap(session, 'map')
session$onFlushed(once = T, function(){
output$map <- leaflet::renderLeaflet(
Map_Gen()
)
})
}
shinyApp(ui, server)
ui <-fluidPage(
# Input widgets
fluidRow(
column(6,
conditionalPanel(condition="input.plot_tabs!='Front Page'",
tabsetPanel(id="ui_tab",
tabPanel("Map",
column(12,h5("Click a Climb"),withSpinner(leaflet::leafletOutput("map", height="600px"),size=2, color="#7c2599"))
),
tabPanel("Crag Climbs (when selected)",
column(12, h5("Choose a Climb"), div(dataTableOutput("table_input"), style = "font-size:70%"))
)
)
),
conditionalPanel(condition="input.plot_tabs=='Front Page'",
column(12)
)
),
column(6,tabsetPanel(id="plot_tabs",
tabPanel("Filters",
fluidRow(column(8,
uiOutput("date_slider"),
radioButtons("ts_plot_type","Plot type:", choices=c("Heatmap", "Habitable width", "Water column exceedances"), inline=T),
conditionalPanel(condition="input.ts_plot_type=='Heatmap'",
selectInput("heatmap_param",label="Heatmap parameter:", choices= heatmap_param_choices)
),
checkboxInput("show_dates", label="Show all profile dates", value=TRUE),
conditionalPanel(condition="input.ts_plot_type=='Heatmap'",
plotOutput("heatmap")
),
conditionalPanel(condition="input.ts_plot_type=='Habitable width'",
plotOutput("hab_width")
),
conditionalPanel(condition="input.ts_plot_type=='Water column exceedances'",
plotOutput("pct_exc")
)
))
),
tabPanel("Individual profiles",
fluidRow(
column(4, uiOutput("date_select"))
),
fluidRow(
column(4,h4("Profile plot"),plotOutput("ind_prof_plot", height="500px")),
column(8,h4("Profile data"),div(dataTableOutput("profile_table"), style = "font-size:80%"))
)
),
tabPanel("Front Page",
fluidRow(
column(12,
includeMarkdown(here("R","Front_Page.md"))
)
)
)
))
)
)
source("~/GitHub/Island_Climbing/R/app_build.R")
server <- function(input, output, session) {
# Loading modal to keep user out of trouble while map draws...
#showModal(modalDialog(title="MAP LOADING - PLEASE WAIT...","Please wait for map to draw before proceeding.",size="l",footer=NULL))
# Remove modal when app is ready
#observe({
#  req(map)
#  removeModal()
#})
# Load data
read_rds(paste0(here(),"/data/Island_Climbing.rds"))
map = leaflet::createLeafletMap(session, 'map')
session$onFlushed(once = T, function(){
output$map <- leaflet::renderLeaflet(
Map_Gen()
)
})
}
shinyApp(ui, server)
ui <-fluidPage(
# Input widgets
fluidRow(
column(6,
conditionalPanel(condition="input.plot_tabs!='Front Page'",
tabsetPanel(id="ui_tab",
tabPanel("Map",
column(12,h5("Choose a Crag"),withSpinner(leaflet::leafletOutput("map", height="600px"),size=2, color="#7c2599"))
),
tabPanel("Crag Climbs (when selected)",
column(12, h5("Choose a Climb"), div(dataTableOutput("table_input"), style = "font-size:70%"))
)
)
),
conditionalPanel(condition="input.plot_tabs=='Front Page'",
column(12)
)
),
column(6,tabsetPanel(id="plot_tabs",
tabPanel("Filters",
fluidRow(column(8,
uiOutput("date_slider"),
radioButtons("ts_plot_type","Plot type:", choices=c("Heatmap", "Habitable width", "Water column exceedances"), inline=T),
conditionalPanel(condition="input.ts_plot_type=='Heatmap'",
selectInput("heatmap_param",label="Heatmap parameter:", choices= heatmap_param_choices)
),
checkboxInput("show_dates", label="Show all profile dates", value=TRUE),
conditionalPanel(condition="input.ts_plot_type=='Heatmap'",
plotOutput("heatmap")
),
conditionalPanel(condition="input.ts_plot_type=='Habitable width'",
plotOutput("hab_width")
),
conditionalPanel(condition="input.ts_plot_type=='Water column exceedances'",
plotOutput("pct_exc")
)
))
),
tabPanel("Individual profiles",
fluidRow(
column(4, uiOutput("date_select"))
),
fluidRow(
column(4,h4("Profile plot"),plotOutput("ind_prof_plot", height="500px")),
column(8,h4("Profile data"),div(dataTableOutput("profile_table"), style = "font-size:80%"))
)
),
tabPanel("Front Page",
fluidRow(
column(12,
includeMarkdown(here("R","Front_Page.md"))
)
)
)
))
)
)
source("~/GitHub/Island_Climbing/R/app_build.R")
server <- function(input, output, session) {
# Loading modal to keep user out of trouble while map draws...
#showModal(modalDialog(title="MAP LOADING - PLEASE WAIT...","Please wait for map to draw before proceeding.",size="l",footer=NULL))
# Remove modal when app is ready
#observe({
#  req(map)
#  removeModal()
#})
# Load data
read_rds(paste0(here(),"/data/Island_Climbing.rds"))
map = leaflet::createLeafletMap(session, 'map')
session$onFlushed(once = T, function(){
output$map <- leaflet::renderLeaflet(
Map_Gen()
)
})
}
shinyApp(ui, server)
e
e
server <- function(input, output, session) {
# Loading modal to keep user out of trouble while map draws...
#showModal(modalDialog(title="MAP LOADING - PLEASE WAIT...","Please wait for map to draw before proceeding.",size="l",footer=NULL))
# Remove modal when app is ready
#observe({
#  req(map)
#  removeModal()
#})
# Load data
read_rds(paste0(here(),"/data/Island_Climbing.rds"))
map = leaflet::createLeafletMap(session, 'map')
session$onFlushed(once = T, function(){
output$map <- leaflet::renderLeaflet(
Map_Gen()
)
})
}
shinyApp(ui, server)
source("~/GitHub/Island_Climbing/R/app_build.R")
server <- function(input, output, session) {
# Loading modal to keep user out of trouble while map draws...
#showModal(modalDialog(title="MAP LOADING - PLEASE WAIT...","Please wait for map to draw before proceeding.",size="l",footer=NULL))
# Remove modal when app is ready
#observe({
#  req(map)
#  removeModal()
#})
# Load data
read_rds(paste0(here(),"/data/Island_Climbing.rds"))
map = leaflet::createLeafletMap(session, 'map')
session$onFlushed(once = T, function(){
output$map <- leaflet::renderLeaflet(
Map_Gen()
)
})
}
shinyApp(ui, server)
source("~/GitHub/Island_Climbing/R/app_build.R")
